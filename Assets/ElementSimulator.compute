#pragma kernel DebugBins
#pragma kernel Init
#pragma kernel ClearBins
#pragma kernel ClearOutputTexture
#pragma kernel CacheParticlesInBins
#pragma kernel ResetTemporaryVariables
#pragma kernel SortParticles
#pragma kernel FinishSortParticles
#pragma kernel ComputeDensityHeatAndPressure
#pragma kernel ApplyHeat
#pragma kernel ComputeForces
#pragma kernel Integrate

// solver parameters
static const float2 G = float2(0, 300 * -9.8); // external (gravitational) forces
static const float REST_DENS = 1000;// 1000; // rest density (basically repel, but slightly different)
static const float GAS_CONST = 2000; // const for equation of state
static const float H = 1.0; // interaction radius
static const float HSQ = H * H; // radius^2 for optimization
static const float HSQ_TEMPERATURE = HSQ * 12.0; // interaction radius
static const float H_SURFACE_TENSION = H * 3.0; // interaction radius
static const float MASS = 20.0; // assume all particles have the same mass
static const float VISC = 25.0; // viscosity constant
static const float DT = 0.001;// 0.0008; // integration timestep
static const float DENSITY_OFFSET = 0.925; // make SPIKY_GRAD apply force earlier (particles don't have to be as close)
static const float VISC_OFFSET = 0.925; // make VISC_LAP apply force earlier (particles don't have to be as close)
static const float PI = 3.14159265359;
// smoothing kernels defined in Müller and their gradients
static const float POLY6 = 315.0 / (65.0 * PI * pow(H, 9.0));
static const float SPIKY_GRAD = -45.0 / (PI * pow(H * DENSITY_OFFSET, 6.0));
static const float VISC_LAP = 45.0 / (PI * pow(H * VISC_OFFSET, 6.0));

// simulation parameters
static const float EPS = H; // boundary epsilon
static const float BOUND_DAMPING = -0.5;

static const float MAX_TEMPERATURE = 1000.0;

static const float THERMAL_DIFFUSIVITY = 0.25;
static const float REPEL_STRENGTH_MIN = 4.0;
static const float REPEL_STRENGTH_MAX = 4.0; // 20
static const float REPEL_FACTOR_MIN = 1.0 / REPEL_STRENGTH_MAX;
static const float REPEL_FACTOR_MAX = 1.0 / REPEL_STRENGTH_MIN;
static const float CLUSTERING_RESISTANCE = 1.0;
static const float SURFACE_TENSION_WATER = 5.0;

static const float STATE_CORRECTION_OFFSET = 0.000001; // offset to ensure two states can't be == 1 at the same time
static const float REPEL_STRENGTH_SMOOTHING_START_SOLID = 0.9;

static const float ALMOST_BUT_NOT_QUITE_ZERO = 0.00001; // used to prevent division by zero

//#region[rgba(80, 0, 0, 1)] | WARNING: shared with ElementSimulator.cs! must be equal!
static const int OUTPUT_THREAD_COUNT_X = 32;
static const int OUTPUT_THREAD_COUNT_Y = 32;

static const int BINS_THREAD_COUNT_X = 16;
static const int BINS_THREAD_COUNT_Y = 16;

static const int THREAD_COUNT_X = 64;
static const uint PIXELS_PER_TILE_EDGE = 32;
static const uint GRID_WIDTH_TILES = 50;
static const uint GRID_HEIGHT_TILES = 50;
static const uint GRID_WIDTH_PIXELS = PIXELS_PER_TILE_EDGE * GRID_WIDTH_TILES;
static const uint GRID_HEIGHT_PIXELS = PIXELS_PER_TILE_EDGE * GRID_HEIGHT_TILES;
static const uint BIN_SIZE = 4;
static const uint BIN_COUNT_X = GRID_WIDTH_PIXELS / BIN_SIZE;
static const uint BIN_COUNT_Y = GRID_HEIGHT_PIXELS / BIN_SIZE;
static const uint BIN_MAX_AMOUNT_OF_CONTENT = 12;
//#endregion

static const uint BIN_CLUSTER_SIZE = 9;
static const uint BIN_CLUSTER_CONTENT_MAX = BIN_CLUSTER_SIZE * BIN_MAX_AMOUNT_OF_CONTENT;

static const int ELEMENT_COUNT = 1;

static const float Mass[ELEMENT_COUNT] = { 
	MASS * 1.0 
};
static const float Viscosity[ELEMENT_COUNT] = {
	VISC * 1.0
};
static const float TemperatureFreezingPoint[ELEMENT_COUNT] = {
	273.15
};
static const float TemperatureBoilingPoint[ELEMENT_COUNT] = {
	373.15
};
static const float RepelStrengthSolid[ELEMENT_COUNT] = {
	1.75
};
static const float RepelStrengthLiquid[ELEMENT_COUNT] = {
	1.5
};
static const float RepelStrengthGas[ELEMENT_COUNT] = {
	2.0
};
static const float ThermalDiffusivitySolid[ELEMENT_COUNT] = {
	1.0
};
static const float ThermalDiffusivityLiquid[ELEMENT_COUNT] = {
	0.75
};
static const float ThermalDiffusivityGas[ELEMENT_COUNT] = {
	0.5
};


uint4 scale(uint4 f1, uint4 f2){
	return uint4(f1.x * f2.x, f1.y * f2.y, f1.z * f2.z, f1.w * f2.w);
}

int signNotZero(float f){
	int fSignActual = sign(f);
	return lerp(1, fSignActual, abs(fSignActual));
}

int sign01(float f){
	return clamp(sign(f), 0, 1);
}

int signAbs(float f){
	return abs(sign(f));
}

float PreventValueBeingZero(float f){
	return max(ALMOST_BUT_NOT_QUITE_ZERO, abs(f)) * signNotZero(f);
}

float2 PreventValueBeingZero(float2 f2){
	return float2(PreventValueBeingZero(f2.x), PreventValueBeingZero(f2.y));
}

struct Particle{ // WARNING: variables must correspond to ElementSimulator.cs's Particle
	float2 pos;
	half2 binPos;
	float2 velocity; 
	float2 force;

	float density;
	float pressure;
	float temperature;
	float temperatureStartFrame;
	float repelFactor;
	half isActive; // every thread needs a particle, so some will get inactive particles instead
	uint elementIndex;
	half4 particlesToHeat;
	half4 heatToGive;
	half debugTemp;
	half debugThermal;
	half debug1;
	half debug2;
	half debug3;
	half debug4;
	half debug5;
	half debug6;
	half debug7;
	half debug8;
	half debug9;
	half debug10;
	half debug11;
	half debug12;
	half abort;
	uint sortingIndex;

	float GetMass()						{ return Mass[elementIndex]; }
	float GetViscosity()				{ return Viscosity[elementIndex]; }
	float GetFreezingPoint()			{ return TemperatureFreezingPoint[elementIndex]; }
	float GetBoilingPoint()				{ return TemperatureBoilingPoint[elementIndex]; }
	float GetRepelStrengthSolid()		{ return RepelStrengthSolid[elementIndex]; }
	float GetRepelStrengthLiquid()		{ return RepelStrengthLiquid[elementIndex]; }
	float GetRepelStrengthGas()			{ return RepelStrengthGas[elementIndex]; }
	float GetThermalDiffusivitySolid()	{ return ThermalDiffusivitySolid[elementIndex]; }
	float GetThermalDiffusivityLiquid()	{ return ThermalDiffusivityLiquid[elementIndex]; }
	float GetThermalDiffusivityGas()	{ return ThermalDiffusivityGas[elementIndex]; }
	
	float IsSolid() {
		return step(temperatureStartFrame, GetFreezingPoint() + STATE_CORRECTION_OFFSET);
	}

	float IsLiquid() {
		return step(temperatureStartFrame, GetBoilingPoint() - STATE_CORRECTION_OFFSET) - IsSolid();
	}

	float IsGas() {
		return step(GetBoilingPoint() - STATE_CORRECTION_OFFSET, temperatureStartFrame);
	}

	float GetThermalDiffusivity() {
		return THERMAL_DIFFUSIVITY * ((IsSolid() * GetThermalDiffusivitySolid()) + (IsLiquid() * GetThermalDiffusivityLiquid()) + (IsGas() * GetThermalDiffusivityGas()));
	}

	float GetRepelStrengthCurrent()	{ 
		return IsSolid() * GetRepelStrengthSolid() + IsLiquid() * GetRepelStrengthLiquid() + IsGas() * GetRepelStrengthGas(); 
	}

	void SetTemperature(float temp){
		temperature = temp;// clamp(temp, 0.0, MAX_TEMPERATURE);

		float isSolid = IsSolid();
		float isLiquid = IsLiquid();
		float isGas = IsGas();

		float repelStrengthSolid = GetRepelStrengthSolid();
		float repelStrengthLiquid = GetRepelStrengthLiquid();
		float repelStrengthGas = GetRepelStrengthGas();

		// to prevent melting causing explosions, lerp the repelstrength
		float repelStrengthSmoothedSolidToLiquid = lerp(repelStrengthSolid, repelStrengthLiquid, clamp((temp - GetFreezingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID) / (GetFreezingPoint() - GetFreezingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID), 0, 1));
		float repelStrengthSmoothedLiquidToGas = lerp(repelStrengthLiquid, repelStrengthGas, clamp((temp - GetBoilingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID) / (GetBoilingPoint() - GetBoilingPoint() * REPEL_STRENGTH_SMOOTHING_START_SOLID), 0, 1));

		// each state has a fixed strength, but gas continues the more temperature increases
		repelFactor = 0.0;
		repelFactor += (1.0 / repelStrengthSmoothedSolidToLiquid) * isSolid;
		repelFactor += (1.0 / repelStrengthSmoothedLiquidToGas) * isLiquid;
		repelFactor += (1.0 / repelStrengthGas) * isGas;

		float extraRepelFactor = 1.0 / clamp(max(REPEL_STRENGTH_MIN, temperature / MAX_TEMPERATURE * REPEL_STRENGTH_MAX), REPEL_STRENGTH_MIN, REPEL_STRENGTH_MAX);
		repelFactor += (extraRepelFactor - repelFactor) * isGas;

		repelFactor = clamp(repelFactor, REPEL_FACTOR_MIN, REPEL_FACTOR_MAX); // just a safeguard
	}
};

struct DebugVars{ // WARNING: variables must correspond to ElementSimulator.compute's Particle!
	half2 debugID;
	half debug_00;
	half debug_01;
	half debug_02;
	half debug_03;
	half debug_04;
	half debug_05;
	half debug_06;
	half debug_07;
	half debug_08;
	half debug_09;
	half debug_10;
	half debug_11;
	half debug_12;
	half debug_13;
	half debug_14;

	void SetID(half id1, half id2){
		debugID.x = id1;
		debugID.y = id2;
	}

	void Set(uint index, float val){
		if(index == 0) debug_00 = val;
		else if(index == 1) debug_01 = val;
		else if(index == 2) debug_02 = val;
		else if(index == 3) debug_03 = val;
		else if(index == 4) debug_04 = val;
		else if(index == 5) debug_05 = val;
		else if(index == 6) debug_06 = val;
		else if(index == 7) debug_07 = val;
		else if(index == 8) debug_08 = val;
		else if(index == 9) debug_09 = val;
		else if(index == 10) debug_10 = val;
		else if(index == 11) debug_11 = val;
		else if(index == 12) debug_12 = val;
		else if(index == 13) debug_13 = val;
		else if(index == 14) debug_14 = val;
		//else hasNewValue = 0;
	}
};


RWStructuredBuffer<Particle> particles;
uniform uint particleCount;
uniform int debugBinIndexX;
uniform int debugBinIndexY;
RWStructuredBuffer<DebugVars> debugVars;

RWTexture2D<half> binLoads;
RWTexture2D<uint4> bins_00;
RWTexture2D<uint4> bins_01;
RWTexture2D<uint4> bins_02;
//RWTexture2D<half4> bins_03;

RWTexture2D<float4> output;
half isFirstFrame;

RWTexture2D<half3> particlesSorted_0;
RWTexture2D<half3> particlesSorted_1; 
uint iterations;

// optimization: not accessing particles other than yourself could be worth looking into


bool IsEven(float f){
	return fmod(f, 2) == 0;
}

[numthreads(32, 32, 1)]
void DebugBins(uint3 id : SV_DISPATCHTHREADID){
	// half4 pixel = half4(2.0, 1.0, 0.5, 0.0);
	// bins_00[id.xy] = pixel;
}

uint2 GetBinPos(float2 pos) {
	return uint2(floor(pos.x / BIN_SIZE), floor(pos.y / BIN_SIZE));
}

void GetParticlesInBin(uint2 binPos, out uint binLoad, out uint binParticles[BIN_MAX_AMOUNT_OF_CONTENT]){
	binLoad = round(binLoads.Load(binPos) * BIN_MAX_AMOUNT_OF_CONTENT);

	uint shouldLoadBins_00 = sign01(binLoad);
	uint shouldLoadBins_01 = sign01(binLoad - 4);
	uint shouldLoadBins_02 = sign01(binLoad - 8);
	//uint shouldLoadBins_03 = sign01(binLoad - 12);

	binParticles[0] = 0.0;
	binParticles[1] = 0.0;
	binParticles[2] = 0.0;
	binParticles[3] = 0.0;
	binParticles[4] = 0.0;
	binParticles[5] = 0.0;
	binParticles[6] = 0.0;
	binParticles[7] = 0.0;
	binParticles[8] = 0.0;
	binParticles[9] = 0.0;
	binParticles[10] = 0.0;
	binParticles[11] = 0.0;
	// binParticles[12] = 0.0;
	// binParticles[13] = 0.0;
	// binParticles[14] = 0.0;
	// binParticles[15] = 0.0;
	
	if(shouldLoadBins_00 == 1){
		uint4 binContents = round(bins_00.Load(binPos));// * particleCount);
		binParticles[0] = binContents.x;
		binParticles[1] = binContents.y;
		binParticles[2] = binContents.z;
		binParticles[3] = binContents.w;
	}
	if(shouldLoadBins_01 == 1){
		uint4 binContents = round(bins_01.Load(binPos));// * particleCount);
		binParticles[4] = binContents.x;
		binParticles[5] = binContents.y;
		binParticles[6] = binContents.z;
		binParticles[7] = binContents.w;
	}
	if(shouldLoadBins_02 == 1){
		uint4 binContents = round(bins_02.Load(binPos));// * particleCount);
		binParticles[8] = binContents.x;
		binParticles[9] = binContents.y;
		binParticles[10] = binContents.z;
		binParticles[11] = binContents.w;
	}
	// if(shouldLoadBins_03 == 1){
	// 	uint4 binContents = round(bins_03.Load(binPos) * particleCount);
	// 	binParticles[12] = binContents.x;
	// 	binParticles[13] = binContents.y;
	// 	binParticles[14] = binContents.z;
	// 	binParticles[15] = binContents.w;
	// }

	// if(binPos.x == 29 && binPos.y == 0){
	// 	debugVars[0].Set(8, binLoad);
	// 	debugVars[0].Set(9, binParticles[0]);
	// 	debugVars[0].Set(10, binParticles[1]);
	// 	debugVars[0].Set(11, binParticles[2]);
	// 	debugVars[0].Set(12, binParticles[3]);
	// 	debugVars[0].Set(13, binParticles[4]);
	// 	debugVars[0].Set(14, binParticles[5]);
	// 	debugVars[0].Set(15, binParticles[6]);
	// 	debugVars[0].Set(16, binParticles[7]);
	// }
}

void GetNeighboringParticles(int particleIndex, uint2 binPos, out uint clusterLoad, out uint clusterContent[BIN_CLUSTER_CONTENT_MAX]){


	// optimization: try seeing if this gets slower or faster with ifs

	half canGo_L = sign01(binPos.x);
	half canGo_R = sign01(BIN_COUNT_X - 1 - binPos.x);
	half canGo_B = sign01(binPos.y);
	half canGo_T = sign01(BIN_COUNT_Y - 1 - binPos.y);

	uint binPos_L = clamp(binPos.x - 1, 0, BIN_COUNT_X - 1);
	uint binPos_R = clamp(binPos.x + 1, 0, BIN_COUNT_X - 1);
	uint binPos_B = clamp(binPos.y - 1, 0, BIN_COUNT_Y - 1);
	uint binPos_T = clamp(binPos.y + 1, 0, BIN_COUNT_Y - 1);

	uint binLoad;
	uint binLoad_L;
	uint binLoad_R;
	uint binLoad_T;
	uint binLoad_B;
	uint binLoad_TL;
	uint binLoad_TR;
	uint binLoad_BL;
	uint binLoad_BR;
	uint binContents[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_L[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_R[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_T[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_B[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_TL[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_TR[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_BL[BIN_MAX_AMOUNT_OF_CONTENT];
	uint binContents_BR[BIN_MAX_AMOUNT_OF_CONTENT];

	GetParticlesInBin(binPos, binLoad, binContents);
	GetParticlesInBin(uint2(binPos_L, binPos.y), binLoad_L, binContents_L);
	GetParticlesInBin(uint2(binPos_R, binPos.y), binLoad_R, binContents_R);
	GetParticlesInBin(uint2(binPos.x, binPos_T), binLoad_T, binContents_T);
	GetParticlesInBin(uint2(binPos.x, binPos_B), binLoad_B, binContents_B);
	GetParticlesInBin(uint2(binPos_L, binPos_T), binLoad_TL, binContents_TL);
	GetParticlesInBin(uint2(binPos_R, binPos_T), binLoad_TR, binContents_TR);
	GetParticlesInBin(uint2(binPos_L, binPos_B), binLoad_BL, binContents_BL);
	GetParticlesInBin(uint2(binPos_R, binPos_B), binLoad_BR, binContents_BR);

	binLoad_L = binLoad_L * canGo_L;
	binLoad_R = binLoad_R * canGo_R;
	binLoad_T = binLoad_T * canGo_T;
	binLoad_B = binLoad_B * canGo_B;
	binLoad_TL = binLoad_TL * canGo_T * canGo_L;
	binLoad_TR = binLoad_TR * canGo_T * canGo_R;
	binLoad_BL = binLoad_BL * canGo_B * canGo_L;
	binLoad_BR = binLoad_BR * canGo_B * canGo_R;

	clusterLoad = 
	binLoad + 
	binLoad_L + 
	binLoad_R + 
	binLoad_T + 
	binLoad_B + 
	binLoad_TL + 
	binLoad_TR + 
	binLoad_BL + 
	binLoad_BR;

	uint i = 0;
	for(; i < binLoad; i++){
		clusterContent[i] = binContents[i];
	} 
	for(uint iL = 0; iL < binLoad_L; iL++, i++){
		clusterContent[i] = binContents_L[iL];
	} 
	for(uint iR = 0; iR < binLoad_R; iR++, i++){
		clusterContent[i] = binContents_R[iR];
	} 
	for(uint iT = 0; iT < binLoad_T; iT++, i++){
		clusterContent[i] = binContents_T[iT];
	} 
	for(uint iB = 0; iB < binLoad_B; iB++, i++){
		clusterContent[i] = binContents_B[iB];
	} 
	for(uint iTL = 0; iTL < binLoad_TL; iTL++, i++){
		clusterContent[i] = binContents_TL[iTL];
	} 
	for(uint iTR = 0; iTR < binLoad_TR; iTR++, i++){
		clusterContent[i] = binContents_TR[iTR];
	} 
	for(uint iBL = 0; iBL < binLoad_BL; iBL++, i++){
		clusterContent[i] = binContents_BL[iBL];
	} 
	for(uint iBR = 0; iBR < binLoad_BR; iBR++, i++){
		clusterContent[i] = binContents_BR[iBR];
	} 
	for(; i < BIN_CLUSTER_CONTENT_MAX; i++){
		clusterContent[i] = 0;
	}

	// if(binPos.x == 29 && binPos.y == 0){
	// 	debugVars[0].Set(0, clusterContent[0]);
	// 	debugVars[0].Set(1, clusterContent[1]);
	// 	debugVars[0].Set(2, clusterContent[2]);
	// 	debugVars[0].Set(3, clusterContent[3]);
	// 	debugVars[0].Set(4, clusterContent[4]);
	// 	debugVars[0].Set(5, clusterContent[5]);
	// 	debugVars[0].Set(6, clusterContent[6]);
	// 	debugVars[0].Set(7, clusterContent[7]);
	// 	debugVars[0].Set(8, 0);
	// 	debugVars[0].Set(9, binLoad);
	// }
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID) { // TODO: is this still needed?
	iterations = 0;

	Particle particle = particles[id.x];
	particle.binPos = GetBinPos(particle.pos);

	particle.debugTemp = 0; 
	
	particle.debugThermal = 0;
	particle.debug1 = 0;
	particle.debug2 = 0;
	particle.debug3 = 0;
	particle.debug4 = 0;
	particle.debug5 = 0;
	particle.debug6 = 0;
	particle.debug7 = 0;
	particle.debug8 = 0;
	particle.debug9 = 0;
	particle.debug10 = 0;
	particle.debug11 = 0;
	particle.debug12 = 0;
	particle.SetTemperature(particle.temperatureStartFrame);

	particlesSorted_0[id.xy] = half3(particle.pos.x, particle.pos.y, id.x);

	particles[id.x] = particle;
}

[numthreads(BINS_THREAD_COUNT_X, BINS_THREAD_COUNT_Y, 1)]
void ClearBins(uint3 id : SV_DispatchThreadID) {
	binLoads[id.xy] = 0.0;
	bins_00[id.xy].wxyz = 0;
	bins_01[id.xy].wxyz = 0;
	bins_02[id.xy].wxyz = 0;
	//bins_03[id.xy].wxyz = 0.0;
}


[numthreads(OUTPUT_THREAD_COUNT_X, OUTPUT_THREAD_COUNT_Y, 1)]
void ClearOutputTexture(uint3 id : SV_DispatchThreadID) {
	output[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
	//output[id.xy] = float4(id.x % (BIN_SIZE + 1) * 0.5, 0.25, id.y % (BIN_SIZE + 1) * 0.5, 1.0);
}

[numthreads(BINS_THREAD_COUNT_X, BINS_THREAD_COUNT_Y, 1)]
void CacheParticlesInBins(uint3 id : SV_DispatchThreadID){

	half binLoad = 0;
	half binContent[BIN_MAX_AMOUNT_OF_CONTENT] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

	for(uint i = 0; i < particleCount; i++){ // TODO: can we skip particles that have already found their bin?
		Particle particle = particles[i];
		// if(particle.isActive == 0){
		// 	break;
		// }

		half isParticleInBinX = 1 - signAbs(id.x - particle.binPos.x);
		half isParticleInBinY = 1 - signAbs(id.y - particle.binPos.y);


		if(isParticleInBinX == 1 && isParticleInBinY == 1){
			if(id.x == debugBinIndexX && id.y == debugBinIndexY){
				// particle.debug1 = particle.binPos.x;
				// particle.debug2 = particle.binPos.y;
				// particle.debug3 = id.x;
				// particle.debug4 = id.y;
			}

			binContent[binLoad] = i;
			binLoad = min(binLoad + 1, BIN_MAX_AMOUNT_OF_CONTENT);
			
			//particle.debugThermal = binLoad;
			//particles[i] = particle;
		}
	}

	// if(id.x == 29 && id.y == 0){
	// 	debugVars[0].Set(0, binContent[0]);
	// 	debugVars[0].Set(1, binContent[1]);
	// 	debugVars[0].Set(2, binContent[2]);
	// 	debugVars[0].Set(3, binContent[3]);
	// 	debugVars[0].Set(4, binContent[4]);
	// 	debugVars[0].Set(5, binContent[5]);
	// 	debugVars[0].Set(6, binContent[6]);
	// 	debugVars[0].Set(7, binContent[7]);
	// }

	binLoads[id.xy] = binLoad / half(BIN_MAX_AMOUNT_OF_CONTENT);
	
	uint particleCountAsHalf = particleCount;
	uint4 binContent_00 = uint4(
		binContent[0],// / particleCountAsHalf,
		binContent[1],// / particleCountAsHalf,
		binContent[2],// / particleCountAsHalf,
		binContent[3]// / particleCountAsHalf
	);
	bins_00[id.xy] = binContent_00;
	
	uint4 binContent_01 = uint4(
		binContent[4],// / particleCountAsHalf,
		binContent[5],// / particleCountAsHalf,
		binContent[6],// / particleCountAsHalf,
		binContent[7]// / particleCountAsHalf
	);
	bins_01[id.xy] = binContent_01;

	uint4 binContent_02 = uint4(
		binContent[8],// / particleCountAsHalf,
		binContent[9],// / particleCountAsHalf,
		binContent[10],// / particleCountAsHalf,
		binContent[11]// / particleCountAsHalf
	);
	bins_02[id.xy] = binContent_02;

	// half4 binContent_03 = half4(
	// 	binContent[12] / particleCount,
	// 	binContent[13] / particleCount,
	// 	binContent[14] / particleCount,
	// 	binContent[15] / particleCount
	// );
	// bins_03[id.xy] = binContent_03;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ResetTemporaryVariables(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	particle.particlesToHeat = half4(0, 0, 0, 0);
	particle.heatToGive = half4(0.0, 0.0, 0.0, 0.0);
	
	particle.debugTemp = 0;
	particle.debugThermal = 0;
	particle.debug1 = 0;
	particle.debug2 = 0;
	particle.debug3 = 0;
	particle.debug4 = 0;
	particle.debug5 = 0;
	particle.debug6 = 0;
	particle.debug7 = 0;
	particle.debug8 = 0;
	particle.debug9 = 0;
	particle.debug10 = 0;
	particle.debug11 = 0;
	particle.debug12 = 0;

	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void SortParticles(uint3 id : SV_DISPATCHTHREADID){
	bool isIterationEven = IsEven(iterations);
	bool shouldUseMax = isIterationEven == IsEven(id.x);

	half3 particleInfo = particlesSorted_0.Load(id.x);
	half3 particleNeighborInfo = isIterationEven ? particlesSorted_0.Load(id.x - 1) : particlesSorted_0.Load(id.x + 1);
	half3 result = shouldUseMax ? max(particleInfo.x, particleNeighborInfo.x) : min(particleInfo.x, particleNeighborInfo.x);

	if(isIterationEven){
		particlesSorted_1[id.xy] = result;
	}
	else{
		particlesSorted_0[id.xy] = result;
	}
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void FinishSortParticles(uint3 id : SV_DISPATCHTHREADID){
	half3 particleInfo = IsEven(iterations) ? particlesSorted_1.Load(id.xy) : particlesSorted_0.Load(id.xy);
	particles[particleInfo.z].sortingIndex = id.x;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ComputeDensityHeatAndPressure(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	uint clusterLoad;
	uint clusterContents[BIN_CLUSTER_CONTENT_MAX];
	GetNeighboringParticles(id.x, particle.binPos, clusterLoad, clusterContents);

	particle.density = particle.GetMass() * POLY6 * pow(HSQ, 2.0);;
	for (uint i = 0; i < clusterLoad; i++){
		uint neighborIndex = clusterContents[i];

	// for (uint i = 0; i < particleCount; i++){
	// 	uint neighborIndex = i;
	
	// uint pIndex = id.x;
	// for (uint i = 0; i < particleCount; i++){
	// 	pIndex = (i + 1) % particleCount;
	 	//int neighborIndex = pIndex;

		Particle otherParticle = particles[neighborIndex];
		float2 dir = otherParticle.pos - particle.pos;
		float r2 = (dir.x * dir.x + dir.y * dir.y) * max(particle.repelFactor, otherParticle.repelFactor);

		half areBothParticlesActive = particle.isActive * otherParticle.isActive;
		half areParticlesDifferent = signAbs(id.x - neighborIndex);
		half shouldApplyDensity = areParticlesDifferent * areBothParticlesActive * step(r2, HSQ);
		// particle.debugThermal = clusterLoad;
		// particle.debug1 = r2;
		// particle.debug2 = HSQ;
		// particle.debug3 = pow(HSQ - r2, 2.0);
		particle.density += shouldApplyDensity * otherParticle.GetMass() * POLY6 * pow(HSQ - r2, 2.0);

		half temperatureStartFrame = particle.temperatureStartFrame;
		half temperatureStartFrameOther = otherParticle.temperatureStartFrame;
		
		half isWithinRange = step(r2, HSQ_TEMPERATURE);
		half isWarmerThanNeighbor = step(temperatureStartFrameOther, temperatureStartFrame);
		half isNeighborBelowMaxHeat = step(otherParticle.temperatureStartFrame, MAX_TEMPERATURE);
		half shouldApplyTemperature = isWarmerThanNeighbor * areParticlesDifferent * areBothParticlesActive * isWithinRange * isNeighborBelowMaxHeat;

		half thermalDiffusivity = (particle.GetThermalDiffusivity() + otherParticle.GetThermalDiffusivity()) * 0.5;
		half exchangeGive = shouldApplyTemperature * (temperatureStartFrame - temperatureStartFrameOther) * thermalDiffusivity;

		half4 particlesToHeat = particle.particlesToHeat;
		half4 heatToGive = particle.heatToGive; 

		half isGreaterThanW = sign01(exchangeGive - heatToGive.w) * shouldApplyTemperature;
		heatToGive.x = lerp(heatToGive.x, heatToGive.y, isGreaterThanW);
		heatToGive.y = lerp(heatToGive.y, heatToGive.z, isGreaterThanW);
		heatToGive.z = lerp(heatToGive.z, heatToGive.w, isGreaterThanW);
		heatToGive.w = lerp(heatToGive.w, exchangeGive, isGreaterThanW);
		particlesToHeat.x = lerp(particlesToHeat.x, particlesToHeat.y, isGreaterThanW);
		particlesToHeat.y = lerp(particlesToHeat.y, particlesToHeat.z, isGreaterThanW);
		particlesToHeat.z = lerp(particlesToHeat.z, particlesToHeat.w, isGreaterThanW);
		particlesToHeat.w = lerp(particlesToHeat.w, neighborIndex, isGreaterThanW);

		half isGreaterThanZ = sign01(exchangeGive - heatToGive.z) * (1 - isGreaterThanW) * shouldApplyTemperature;
		heatToGive.x = lerp(heatToGive.x, heatToGive.y, isGreaterThanZ);
		heatToGive.y = lerp(heatToGive.y, heatToGive.z, isGreaterThanZ);
		heatToGive.z = lerp(heatToGive.z, exchangeGive, isGreaterThanZ);
		particlesToHeat.x = lerp(particlesToHeat.x, particlesToHeat.y, isGreaterThanZ);
		particlesToHeat.y = lerp(particlesToHeat.y, particlesToHeat.z, isGreaterThanZ);
		particlesToHeat.z = lerp(particlesToHeat.z, neighborIndex, isGreaterThanZ);

		half isGreaterThanY = sign01(exchangeGive - heatToGive.y) * (1 - isGreaterThanW) * (1 - isGreaterThanZ) * shouldApplyTemperature;
		heatToGive.x = lerp(heatToGive.x, heatToGive.y, isGreaterThanY);
		heatToGive.y = lerp(heatToGive.y, exchangeGive, isGreaterThanY);
		particlesToHeat.x = lerp(particlesToHeat.x, particlesToHeat.y, isGreaterThanY);
		particlesToHeat.y = lerp(particlesToHeat.y, neighborIndex, isGreaterThanY);
		
		half isGreaterThanX = sign01(exchangeGive - heatToGive.x) * (1 - isGreaterThanW) * (1 - isGreaterThanZ) * (1 - isGreaterThanY) * shouldApplyTemperature;
		heatToGive.x = lerp(heatToGive.x, exchangeGive, isGreaterThanX);
		particlesToHeat.x = lerp(particlesToHeat.x, neighborIndex, isGreaterThanX);

		particle.particlesToHeat = particlesToHeat;
		particle.heatToGive = heatToGive;
	}

	// particle.debugThermal = clusterLoad;
	// particle.debug1 = particle.temperature;

	// clamp components
	half4 heatToGive = particle.heatToGive;
	half heat = particle.temperatureStartFrame;

	heatToGive.x = min(heatToGive.x, heat);
	heatToGive.y = min(heatToGive.y, heat - heatToGive.x);
	heatToGive.z = min(heatToGive.z, heat - (heatToGive.x + heatToGive.y));
	heatToGive.w = min(heatToGive.w, heat - (heatToGive.x + heatToGive.y + heatToGive.z));
	particle.heatToGive = heatToGive;

	particle.pressure = particle.isActive * GAS_CONST * (particle.density - REST_DENS);


	particle.debugThermal = particle.sortingIndex;

	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ApplyHeat(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	uint clusterLoad;
	uint clusterContents[BIN_CLUSTER_CONTENT_MAX];
	GetNeighboringParticles(id.x, particle.binPos, clusterLoad, clusterContents);


	half heat = particle.temperatureStartFrame;
	
	for (uint i = 0; i < clusterLoad; i++){
		uint neighborIndex = clusterContents[i];

	// for (uint i = 0; i < particleCount; i++){
	// 	uint neighborIndex = i;

		Particle otherParticle = particles[neighborIndex];

		uint4 othersParticlesToHeat = otherParticle.particlesToHeat;
		half isParticleX = 1 - signAbs(othersParticlesToHeat.x - id.x);
		half isParticleY = 1 - signAbs(othersParticlesToHeat.y - id.x);
		half isParticleZ = 1 - signAbs(othersParticlesToHeat.z - id.x);
		half isParticleW = 1 - signAbs(othersParticlesToHeat.w - id.x);

		half4 othersHeatToGive = otherParticle.heatToGive; 
		heat += othersHeatToGive.x * isParticleX;
		heat += othersHeatToGive.y * isParticleY;
		heat += othersHeatToGive.z * isParticleZ;
		heat += othersHeatToGive.w * isParticleW;
	}


	half4 heatToGive = particle.heatToGive;
	particle.SetTemperature(heat - (heatToGive.x + heatToGive.y + heatToGive.z + heatToGive.w));

	// particle.debug1 = clusterLoad;
	// particle.debug2 = heat;
	// particle.debug3 = particle.particlesToHeat.x;
	// particle.debug4 = particle.particlesToHeat.y;
	// particle.debug5 = particle.particlesToHeat.z;
	// particle.debug6 = particle.particlesToHeat.w;
	// particle.debug7 = heatToGive.x;
	// particle.debug8 = heatToGive.y;
	// particle.debug9 = heatToGive.z;
	// particle.debug10 = heatToGive.w;

	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void ComputeForces(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	float2 fpress = float2(0.0, 0.0);
	float2 fvisc = float2(0.0, 0.0);
	float2 fsurftens = float2(0.0, 0.0);
	
	uint clusterLoad;
	uint clusterContents[BIN_CLUSTER_CONTENT_MAX];
	GetNeighboringParticles(id.x, particle.binPos, clusterLoad, clusterContents);

	// particle.debug1 = clusterLoad;
	// particle.debug2 = clusterContents[0];
	// particle.debug3 = clusterContents[1];
	// particle.debug4 = clusterContents[2];
	// particle.debug5 = clusterContents[3];
	// particle.debug6 = clusterContents[4];
	// particle.debug7 = clusterContents[5];
	// particle.debug8 = clusterContents[6];
	// particle.debug9 = clusterContents[7];
	// particle.debug10 = clusterContents[8];
	// particle.debug11 = clusterContents[9];
	// particle.debug12 = clusterContents[10];

	// if(particle.binPos.x == 29 && particle.binPos.y == 0){
	// 	debugVars[0].Set(0, clusterLoad);
	// 	debugVars[0].Set(1, clusterContents[0]);
	// 	debugVars[0].Set(2, clusterContents[1]);
	// 	debugVars[0].Set(3, clusterContents[2]);
	// 	debugVars[0].Set(4, clusterContents[3]);
	// 	debugVars[0].Set(5, clusterContents[4]);
	// 	debugVars[0].Set(6, clusterContents[5]);
	// 	debugVars[0].Set(7, clusterContents[6]);
	// 	debugVars[0].Set(8, clusterContents[7]);
	// 	debugVars[0].Set(9, clusterContents[8]);
	// 	debugVars[0].Set(10, clusterContents[9]);
	// 	debugVars[0].Set(11, clusterContents[10]);
	// 	debugVars[0].Set(12, clusterContents[11]);
	// 	debugVars[0].Set(13, clusterContents[12]);
	// 	debugVars[0].Set(14, clusterContents[13]);
	// }

	int touchCount = 0;
	for (uint i = 0; i < clusterLoad; i++){
		uint neighborIndex = clusterContents[i];
	
	// for (uint i = 0; i < particleCount; i++){
	// 	int neighborIndex = i;

		Particle otherParticle = particles[neighborIndex];
		float2 diff = PreventValueBeingZero(otherParticle.pos - particle.pos);
		float2 diffNormal = normalize(diff);

		float r = sqrt(diff.x * diff.x + diff.y * diff.y) * max(particle.repelFactor, otherParticle.repelFactor);

		uint areParticlesDifferent = signAbs(id.x - neighborIndex);
		uint isTouchingNeighbor = step(r, H);
		uint shouldApplyAnything = isTouchingNeighbor * areParticlesDifferent * particle.isActive * otherParticle.isActive;
		touchCount += isTouchingNeighbor;
		if(neighborIndex == 127 && isTouchingNeighbor == 1){
			particle.debugTemp = 1;
		}

		// compute pressure force contribution
		fpress += shouldApplyAnything * -diffNormal * otherParticle.GetMass() * (particle.pressure + otherParticle.pressure) / (2.0 * otherParticle.density) * SPIKY_GRAD * pow(H - r, 2.0) * CLUSTERING_RESISTANCE;
		// compute viscosity force contribution
		fvisc += shouldApplyAnything * otherParticle.GetViscosity() * otherParticle.GetMass() * (otherParticle.velocity - particle.velocity) / otherParticle.density * VISC_LAP * (H - r);
		
		// bounce off frozen particles
		float shouldApplyBounce = shouldApplyAnything * floor((isTouchingNeighbor + otherParticle.IsSolid()) / 2.0);
		particle.velocity.x *= lerp(1.0, diffNormal.x * BOUND_DAMPING, shouldApplyBounce);
		particle.velocity.y *= lerp(1.0, diffNormal.y * BOUND_DAMPING, shouldApplyBounce);

		float shouldApplySurfaceTension = shouldApplyAnything * floor((step(r, H_SURFACE_TENSION) + particle.IsLiquid()) * 0.5);
		fsurftens += shouldApplySurfaceTension * diffNormal * VISC_LAP * SURFACE_TENSION_WATER;
	}

	float2 fgrav = G * particle.density;
	particle.force = particle.isActive * (fpress + fvisc + fgrav + fsurftens);

	// particle.debug1 = clusterLoad;
	// particle.debug2 = touchCount;
	// particle.debug3 = particle.density;
	// particle.debug4 = particle.pressure;
	// particle.debug5 = fpress.x;
	// particle.debug6 = fpress.y;
	// particle.debug7 = fvisc.x;
	// particle.debug8 = fvisc.y;

	particles[id.x] = particle;
}

[numthreads(THREAD_COUNT_X, 1, 1)]
void Integrate(uint3 id : SV_DispatchThreadID) {
	Particle particle = particles[id.x];
	if(particle.isActive == 0){
		return;
	}

	particle.force.x = PreventValueBeingZero(particle.force.x);
	particle.force.y = PreventValueBeingZero(particle.force.y);
	particle.density = PreventValueBeingZero(particle.density);

	// forward Euler integration
	particle.velocity += DT * (particle.force / particle.density);
	particle.pos += DT * particle.velocity;

	// enforce boundary conditions
	// int hasHitEdge = 0;
	// if (particle.pos.x - EPS < 0.0){
	// 	particle.velocity.x *= BOUND_DAMPING;
	// 	particle.pos.x = EPS;
	// 	hasHitEdge = 1;
	// }
	// if (particle.pos.x + EPS > GRID_WIDTH_PIXELS){
	// 	particle.velocity.x *= BOUND_DAMPING;
	// 	particle.pos.x = GRID_WIDTH_PIXELS - EPS;
	// 	hasHitEdge = 1;
	// }
	// if (particle.pos.y - EPS < 0.0){
	// 	particle.velocity.y *= BOUND_DAMPING;
	// 	particle.pos.y = EPS;
	// 	hasHitEdge = 1;
	// }
	// if (particle.pos.y + EPS > GRID_HEIGHT_PIXELS){
	// 	particle.velocity.y *= BOUND_DAMPING;
	// 	particle.pos.y = GRID_HEIGHT_PIXELS - EPS;
	// 	hasHitEdge = 1;
	// }

	float oldX = particle.pos.x;
	float oldY = particle.pos.y;
	particle.pos.x = clamp(particle.pos.x, EPS, GRID_WIDTH_PIXELS - EPS);
	particle.pos.y = clamp(particle.pos.y, EPS, GRID_HEIGHT_PIXELS - EPS);

	particle.velocity.x *= lerp(1.0, BOUND_DAMPING, clamp(ceil(abs(particle.pos.x - oldX)), 0, 1));
	particle.velocity.y *= lerp(1.0, BOUND_DAMPING, clamp(ceil(abs(particle.pos.y - oldY)), 0, 1));

	// float temperature = particle.temperature;
	// float diffTemperature = temperature - BOUND_TEMPERATURE;
	// float isBoundaryWarmerThanParticle = clamp(sign(BOUND_TEMPERATURE - temperature), 0, 1);
	// float exchange = diffTemperature;
	// exchange *= lerp(particle.GetThermalDiffusivity(), BOUND_THERMAL_DIFFUSIVITY, isBoundaryWarmerThanParticle);
	// particle.SetTemperature(temperature - exchange * hasHitEdge);


	// if(output[particle.pos].a == 0){ // FIX THIS
	float temp = particle.temperature / MAX_TEMPERATURE;
	output[particle.pos] = float4(temp, 0, 1 - temp, particle.isActive);// float4(particle.velocity.x * 1000, 0, particle.velocity.y * 1000, particle.isActive);// float4((particle.pos.x / GRID_WIDTH_PIXELS), 0, (particle.pos.y / GRID_HEIGHT_PIXELS), particle.isActive);// float4(0, 0.25, 0.75, particle.isActive);
	//output[particle.pos] = float4(particle.temperature, 1 - sign(id.x), 1- particle.temperature, particle.isActive);// float4(particle.velocity.x * 1000, 0, particle.velocity.y * 1000, particle.isActive);// float4((particle.pos.x / GRID_WIDTH_PIXELS), 0, (particle.pos.y / GRID_HEIGHT_PIXELS), particle.isActive);// float4(0, 0.25, 0.75, particle.isActive);

	//} 
	particle.binPos = GetBinPos(particle.pos); // for next frame
	if(particle.binPos.x == debugBinIndexX && particle.binPos.y == debugBinIndexY){ 
		uint4 contents_0 = bins_00.Load(particle.binPos);
		uint4 contents_1 = bins_01.Load(particle.binPos);
		uint4 contents_2 = bins_02.Load(particle.binPos);
		debugVars[0].SetID(debugBinIndexX, debugBinIndexY);

		debugVars[0].Set(0, round(contents_0.x * particleCount));
		debugVars[0].Set(1, round(contents_0.y * particleCount));
		debugVars[0].Set(2, round(contents_0.z * particleCount));
		debugVars[0].Set(3, round(contents_0.w * particleCount));
		debugVars[0].Set(4, round(contents_1.x * particleCount));
		debugVars[0].Set(5, round(contents_1.y * particleCount));
		debugVars[0].Set(6, round(contents_1.z * particleCount));
		debugVars[0].Set(7, round(contents_1.w * particleCount));
		debugVars[0].Set(8, round(contents_2.x * particleCount));
		debugVars[0].Set(9, round(contents_2.y * particleCount));
		debugVars[0].Set(10, contents_2.z * particleCount);
		debugVars[0].Set(11, contents_2.w * particleCount);
	}

	particle.temperatureStartFrame = particle.temperature; // for next frame
	
	particlesSorted_0[uint2(particle.sortingIndex, 0)] = half3(particle.pos.x, particle.pos.y, id.x);
	particlesSorted_1[uint2(particle.sortingIndex, 0)] = half3(particle.pos.x, particle.pos.y, id.x);

	particles[id.x] = particle;
}