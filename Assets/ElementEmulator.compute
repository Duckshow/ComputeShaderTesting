#pragma kernel Init
#pragma kernel Update

// ============== WARNING: shared with ElementEmulator.cs! must be equal!
static const uint PIXELS_PER_TILE_EDGE = 32;
static const uint GRID_WIDTH_TILES = 3;
static const uint GRID_HEIGHT_TILES = 1;
static const uint GRID_WIDTH_PIXELS = PIXELS_PER_TILE_EDGE * GRID_WIDTH_TILES;
static const uint GRID_HEIGHT_PIXELS = PIXELS_PER_TILE_EDGE * GRID_HEIGHT_TILES;
static const uint2 TERRAINMAP_SIZE_PIXELS = uint2(96, 32);
//===============

struct PixelContent{ // WARNING: variables must correspond to ElementEmulator.cs's PixelContent!
	static const half TEMPERATURE_MAX = 10000.0;
	static const half TEMPERATURE_MIN = 0.00001;

	half Element1;
	half Temperature; // keep between 0-10.000(K) (celsius = -273-9727)

	half4 Wind;
	half4 TerrainMapPixel;


	half IsFreeFromObstacles(){
		return 1 - round(TerrainMapPixel.a);
	}

	void ClearContentIfBlockedByObstacle(){ // Note: Temperature should still be able to spread though
		half isFree = IsFreeFromObstacles();
		Element1 *= isFree;
	}

	half GetWindInDirection(half4 direction){
		half4 directedWind = Wind * direction;
		return directedWind.x + directedWind.y + directedWind.z + directedWind.w;
	}

	void ApplyNeighborWind(inout half windFore, inout half windBack, inout half windSide1, inout half windSide2, half pressureFore, half pressureBack, half pressureSide1, half pressureSide2, half windIncoming, bool canReachForward, bool canReachBack, bool canReachSide1, bool canReachSide2){
		half delta = canReachForward * (pressureFore - clamp(pressureFore - windIncoming, 0, 1));
		windFore -= delta * clamp(canReachBack + canReachSide1 + canReachSide2, 0, 1);
		windBack += delta * canReachBack;

		half reachableSideCountMod = 1.0 / (canReachSide1 + canReachSide2);
		windSide1 += delta * canReachSide1 * (1 - canReachBack) * reachableSideCountMod;
		windSide2 += delta * canReachSide2 * (1 - canReachBack) * reachableSideCountMod;
	}

	void UpdateWind(half windFromUp, half windFromDown, half windFromRight, half windFromLeft, bool canReachUp, bool canReachDown, bool canReachRight, bool canReachLeft){
		half4 pressure = GetPressureAllDirections();
		ApplyNeighborWind(Wind.x, Wind.y, Wind.z, Wind.w, pressure.x, pressure.y, pressure.z, pressure.w, windFromUp, canReachUp, canReachDown, canReachRight, canReachLeft);
		ApplyNeighborWind(Wind.y, Wind.x, Wind.z, Wind.w, pressure.y, pressure.x, pressure.z, pressure.w, windFromDown, canReachDown, canReachUp, canReachRight, canReachLeft);
		ApplyNeighborWind(Wind.z, Wind.w, Wind.x, Wind.y, pressure.z, pressure.w, pressure.x, pressure.y, windFromRight, canReachRight, canReachLeft, canReachUp, canReachDown);
		ApplyNeighborWind(Wind.w, Wind.z, Wind.x, Wind.y, pressure.w, pressure.z, pressure.x, pressure.y, windFromLeft, canReachLeft, canReachRight, canReachUp, canReachDown);
	}

	half GetPressure(half4 pressureDirection){
		half4 windDirected = Wind * pressureDirection;
		half windInDirection = windDirected.x + windDirected.y + windDirected.z + windDirected.w;

		return Element1 * windInDirection;// * (Temperature / TEMPERATURE_MAX); // add Elements, multiply with Temperature
	}

	half4 GetPressureAllDirections(){
		return Element1 * Wind;
	}
	
	void ApplySpreadFromNeighbor(bool canReach, PixelContent neighbor, half4 directionToNeighbor, half4 directionFromNeighbor){
		half pressureDiff = neighbor.GetPressure(directionFromNeighbor) - GetPressure(directionToNeighbor);
		pressureDiff = clamp(pressureDiff, -1, 1);

		uint giveOrReceive = clamp(sign(pressureDiff), 0, 1);
		Element1 += lerp(Element1, neighbor.Element1, giveOrReceive) * pressureDiff * canReach;
	}

	void GetCanReachNeighbors(uint3 id, PixelContent pixel, PixelContent pixelUp, PixelContent pixelDown, PixelContent pixelRight, PixelContent pixelLeft, out bool canReachAbove, out bool canReachBelow, out bool canReachRight, out bool canReachLeft){
		canReachAbove = clamp(GRID_HEIGHT_PIXELS - 1 - id.y, 0, 1);
		canReachBelow = clamp(id.y, 0, 1);
		canReachRight = clamp(GRID_WIDTH_PIXELS - 1 - id.x, 0, 1);
		canReachLeft = clamp(id.x, 0, 1);

		bool isPixelFree = pixel.IsFreeFromObstacles();
		canReachAbove = min(canReachAbove, isPixelFree * pixelUp.IsFreeFromObstacles());
		canReachBelow = min(canReachBelow, isPixelFree * pixelDown.IsFreeFromObstacles());
		canReachRight = min(canReachRight, isPixelFree * pixelRight.IsFreeFromObstacles());
		canReachLeft  = min(canReachLeft, isPixelFree * pixelLeft.IsFreeFromObstacles());
	}

	void SpreadContentFromNeighbors(uint3 id, PixelContent pixel, PixelContent pixelUp, PixelContent pixelDown, PixelContent pixelRight, PixelContent pixelLeft){
		half4 up = half4(1, 0, 0, 0);
		half4 down = half4(0, 1, 0, 0);
		half4 right = half4(0, 0, 1, 0);
		half4 left = half4(0, 0, 0, 1);


		// NOTE: even if Elements can't reach, Temperature should be able to spread, right?
		bool canReachUp, canReachDown, canReachRight, canReachLeft;
		GetCanReachNeighbors(id, pixel, pixelUp, pixelDown, pixelRight, pixelLeft, canReachUp, canReachDown, canReachRight, canReachLeft);

		UpdateWind(pixelUp.GetPressure(down), pixelDown.GetPressure(up), pixelRight.GetPressure(left), pixelLeft.GetPressure(right), canReachUp, canReachDown, canReachRight, canReachLeft);
		//Wind = half4(0.25, 0.25, 0.25, 0.25);

		ApplySpreadFromNeighbor(canReachUp, pixelUp, up, down);
		ApplySpreadFromNeighbor(canReachDown, pixelDown, down, up);
		ApplySpreadFromNeighbor(canReachRight, pixelRight, right, left);
		ApplySpreadFromNeighbor(canReachLeft, pixelLeft, left, right);
	}
};

RWStructuredBuffer<PixelContent> pixelsContent;
StructuredBuffer<half2> uvs;
Texture2D<float4> terrainMap;
RWTexture2D<float4> output;


uint GetPixelsContentIndex(uint3 id){
	return GRID_WIDTH_PIXELS * id.y + id.x;
}

void GetPixelAndNeighbors(uint pixelsContentIndex, out PixelContent pixel, out PixelContent pixelAbove, out PixelContent pixelBelow, out PixelContent pixelRight, out PixelContent pixelLeft){
	uint indexAbove = pixelsContentIndex + GRID_WIDTH_PIXELS;
	uint indexBelow = pixelsContentIndex - GRID_WIDTH_PIXELS;
	uint indexRight = pixelsContentIndex + 1;
	uint indexLeft = pixelsContentIndex - 1;
	pixel = pixelsContent[pixelsContentIndex];
	pixelAbove = pixelsContent[indexAbove];
	pixelBelow = pixelsContent[indexBelow];
	pixelRight = pixelsContent[indexRight];
	pixelLeft = pixelsContent[indexLeft];
}

[numthreads(32, 32, 1)]
void Init(uint3 id : SV_DispatchThreadID){
	uint2 pixelRelativeToTile = id.xy % PIXELS_PER_TILE_EDGE;
	uint2 tilePos = (id.xy - pixelRelativeToTile) / PIXELS_PER_TILE_EDGE;
	uint2 tilesPerEdge = GRID_WIDTH_PIXELS / PIXELS_PER_TILE_EDGE;
	
	uint uvsIndex = tilesPerEdge.x * tilePos.y + tilePos.x;
	half2 uv = uvs[uvsIndex];
	
	uint2 terrainMapBottomLeftIndex = uvs[uvsIndex] * TERRAINMAP_SIZE_PIXELS;
	uint2 terrainMapIndex = terrainMapBottomLeftIndex + pixelRelativeToTile;

	uint pixelsContentIndex = GetPixelsContentIndex(id);
	PixelContent pixel, pixelAbove, pixelBelow, pixelRight, pixelLeft; 
	GetPixelAndNeighbors(pixelsContentIndex, pixel, pixelAbove, pixelBelow, pixelRight, pixelLeft);

	pixel.Wind = half4(0.25, 0.25, 0.25, 0.25);
	pixel.TerrainMapPixel = terrainMap[terrainMapIndex];
	pixel.Element1 *= pixel.IsFreeFromObstacles();
	pixelsContent[pixelsContentIndex] = pixel;
}

[numthreads(32, 32, 1)]
void Update (uint3 id : SV_DispatchThreadID){
	uint pixelsContentIndex = GetPixelsContentIndex(id);
	PixelContent pixel, pixelAbove, pixelBelow, pixelRight, pixelLeft; 
	GetPixelAndNeighbors(pixelsContentIndex, pixel, pixelAbove, pixelBelow, pixelRight, pixelLeft);

	pixel.SpreadContentFromNeighbors(id, pixel, pixelAbove, pixelBelow, pixelRight, pixelLeft);

	pixelsContent[pixelsContentIndex] = pixel;
	float4 outputColor = float4(pixel.TerrainMapPixel.a, 0, pixel.Element1, 1);
	//output[id.xy] = outputColor;
	output[id.xy] = float4(pixel.Wind.x, pixel.Wind.y, pixel.Wind.w, 1);
}